events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;
    error_log  /var/log/nginx/error.log warn;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # Gzip 압축 설정
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml;

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;

    upstream backend {
        server api:8080;
        # 여러 인스턴스가 있다면:
        # server api1:8080;
        # server api2:8080;
    }

    upstream swagger_upstream {
        server swagger:8080;
    }

    server {
        listen 80;
        server_name amigo.hjyoon.me, test.move37.top;
        return 301 https://$host$request_uri;
    }

    server {
        listen 443 ssl http2;
        listen 443 quic reuseport;
        server_name amigo.hjyoon.me, test.move37.top;

        ssl_certificate     /etc/letsencrypt/hjyoon.me/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/hjyoon.me/privkey.pem;
        ssl_session_timeout 1d;
        ssl_session_cache shared:SSL:50m;
        ssl_protocols TLSv1.3;
        ssl_prefer_server_ciphers off;
        # 0-RTT 원치 않으면
        ssl_early_data off;

        # 보안 헤더
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;

        # HTTP/3 광고(브라우저 학습)
        add_header Alt-Svc 'h3=":443"; ma=86400' always;

        # Health check endpoints (Nginx가 직접 응답)
        location = /nginx-health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # API 프록시
        location /api/ {
            limit_req zone=api burst=20 nodelay;

            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # 타임아웃 설정
            proxy_connect_timeout 5s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;

            # 버퍼링 설정
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
        }

        # ---------- Swagger UI ----------
        # /docs → /docs/ 로 정규화
        location = /docs {
            return 302 /docs/;
        }
        # /docs/* 를 swagger 컨테이너로 프록시
        location ^~ /docs/ {
            proxy_pass http://swagger_upstream/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_read_timeout 30s;
        }
        # 스펙 파일도 프록시 (compose의 swagger가 /openapi.yaml 제공)
        location = /openapi.yaml {
            proxy_pass http://swagger_upstream/openapi.yaml;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            types { text/yaml yaml; }
            default_type text/yaml;
        }
        # ---------- /Swagger UI ----------

        # Health check 프록시
        location ~ ^/(liveness|readiness)$ {
            proxy_pass http://backend;
            proxy_set_header Host $host;
            access_log off;
        }

        location / {
            root /usr/share/nginx/html;
            index index.html;
            try_files $uri $uri/ /index.html;

            # 캐싱 설정
            expires 1h;
            add_header Cache-Control "public";

            # index.html은 캐싱하지 않음 (업데이트 반영을 위해)
            location = /index.html {
                expires -1;
                add_header Cache-Control "no-cache, no-store, must-revalidate";
                add_header Pragma "no-cache";
            }
        }

        location /static/ {
            root /usr/share/nginx/html;
            expires 1y;
            add_header Cache-Control "public, immutable";
            gzip_static on;
        }
    }
}
