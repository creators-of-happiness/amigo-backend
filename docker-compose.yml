services:
  nginx:
    image: nginx:1.27-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/html:/usr/share/nginx/html:ro
      - ./certs:/etc/letsencrypt:ro
    depends_on:
      - api

  api:
    build:
      context: .
    ports:
      - "8080:8080"
    env_file: .env
    environment:
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}?sslmode=disable&connect_timeout=2
    depends_on:
      db:
        condition: service_healthy

  db:
    image: postgres:16-alpine
    env_file: .env
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB} -h 127.0.0.1"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s

  migrate:
    image: migrate/migrate:latest
    env_file: .env
    environment:
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}?sslmode=disable&connect_timeout=2
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./db/migrations:/migrations:ro
    entrypoint: ["/bin/sh", "-c"]
    command: >
      "migrate -path /migrations -database $$DATABASE_URL up"

  swagger:
    image: swaggerapi/swagger-ui:latest
    ports:
      - "8004:8080"
    volumes:
      - ./openapi.yaml:/usr/share/nginx/html/openapi.yaml:ro
    environment:
      URL: /openapi.yaml
    depends_on:
      api:
        condition: service_started

volumes:
  postgres-data:
